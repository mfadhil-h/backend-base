version: "3.9"
services:
  postgres:
    image: postgres:16-alpine
    container_name: backend_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app_db
      TZ: Asia/Jakarta
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: backend_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      TZ: Asia/Jakarta
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 5s
      retries: 5

  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: go_backend_dev
    env_file:
      - .env
    environment:
      - TZ=Asia/Jakarta
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
      - ./keys:/app/keys:ro   # ðŸ‘ˆ mount keys read-only
      - tmp_data:/app/tmp     # âœ… Add this line (keeps tmp inside container)
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  pgdata:
  go_mod_cache:
  tmp_data:
