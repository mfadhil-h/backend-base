services:
  postgres:
    image: postgres:16-alpine
    container_name: backend_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app_db
      TZ: Asia/Jakarta
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: backend_rabbitmq
    environment:
      - TZ=Asia/Jakarta
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go_backend
    env_file:
      - .env
    environment:
      - TZ=Asia/Jakarta
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./.env:/app/.env   # ðŸ‘ˆ mounts .env into container so Viper can read it
  # api-dev:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   container_name: go_backend_dev
  #   env_file:
  #     - .env
  #   environment:
  #     - TZ=Asia/Jakarta
  #   volumes:
  #     - .:/app       # ðŸ”¥ mount your code (for live reload)
  #     - go_mod_cache:/go/pkg/mod
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy

volumes:
  # go_mod_cache:
  pgdata: